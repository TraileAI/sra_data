"""
FMP CSV loader - loads pre-extracted FMP data from CSV files to PostgreSQL.
Fast deployment using PostgreSQL COPY FROM for maximum performance.
"""
import os
import psycopg2
import logging
from typing import Dict, List
import sys

# Add current directory to path for imports
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from config import config

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Database configuration
logger.info("Loading database configuration for FMP CSV loader...")
DB_CONFIG = config.db_config
DB_HOST = DB_CONFIG['host']
DB_PORT = DB_CONFIG['port']
DB_NAME = DB_CONFIG['database']
DB_USER = DB_CONFIG['user']
DB_PASSWORD = DB_CONFIG['password']

logger.info(f"Database config loaded: {DB_HOST}:{DB_PORT}/{DB_NAME} as {DB_USER}")

# FMP CSV file mappings
FMP_CSV_TABLES = {
    'equity_profile.csv': 'equity_profile',
    'equity_income.csv': 'equity_income',
    'equity_balance.csv': 'equity_balance',
    'equity_cash_flow.csv': 'equity_cashflow',
    'equity_peers.csv': 'equity_peers',
    'equity_ratios.csv': 'equity_financial_ratio',
    'equity_key_metrics.csv': 'equity_key_metrics',
    'equity_balance_growth.csv': 'equity_balance_growth',
    'equity_cashflow_growth.csv': 'equity_cashflow_growth',
    'equity_financial_growth.csv': 'equity_financial_growth',
    'equity_income_growth.csv': 'equity_income_growth',
    'etfs_profile.csv': 'etfs_profile',
    'etfs_peers.csv': 'etfs_peers',
    'etfs_data.csv': 'etfs_data',
}

def get_fmp_csv_directory():
    """Get the FMP CSV data directory path."""
    # Get the project root directory (parent of this script's directory)
    project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    return os.path.join(project_root, 'fmp_data')

def create_tables(conn):
    """Create FMP tables if they don't exist."""
    logger.info("Creating FMP tables if needed...")

    with conn.cursor() as cur:
        # Equity profile table
        cur.execute("""
            CREATE TABLE IF NOT EXISTS equity_profile (
                symbol VARCHAR(15) PRIMARY KEY,
                price DOUBLE PRECISION,
                beta DOUBLE PRECISION,
                vol_avg BIGINT,
                mkt_cap BIGINT,
                last_div DOUBLE PRECISION,
                range_str VARCHAR(50),
                changes DOUBLE PRECISION,
                company_name VARCHAR(255),
                currency VARCHAR(10),
                cik VARCHAR(20),
                isin VARCHAR(20),
                cusip VARCHAR(20),
                exchange VARCHAR(100),
                exchange_short_name VARCHAR(50),
                industry VARCHAR(100),
                website VARCHAR(255),
                description TEXT,
                ceo VARCHAR(100),
                sector VARCHAR(100),
                country VARCHAR(50),
                full_time_employees BIGINT,
                phone VARCHAR(50),
                address VARCHAR(255),
                city VARCHAR(100),
                state VARCHAR(50),
                zip_code VARCHAR(20),
                dcf_diff DOUBLE PRECISION,
                dcf DOUBLE PRECISION,
                image VARCHAR(255),
                ipo_date DATE,
                default_image BOOLEAN,
                is_etf BOOLEAN,
                is_actively_trading BOOLEAN,
                is_adr BOOLEAN,
                is_fund BOOLEAN
            )
        """)

        # Equity income table - match CSV headers exactly
        cur.execute("""
            CREATE TABLE IF NOT EXISTS equity_income (
                date DATE,
                symbol VARCHAR(15),
                reportedCurrency VARCHAR(3),
                cik VARCHAR(20),
                fillingDate DATE,
                acceptedDate TIMESTAMP,
                calendarYear SMALLINT,
                period VARCHAR(3),
                revenue NUMERIC,
                costOfRevenue NUMERIC,
                grossProfit NUMERIC,
                grossProfitRatio DOUBLE PRECISION,
                researchAndDevelopmentExpenses NUMERIC,
                generalAndAdministrativeExpenses NUMERIC,
                sellingAndMarketingExpenses NUMERIC,
                sellingGeneralAndAdministrativeExpenses NUMERIC,
                otherExpenses NUMERIC,
                operatingExpenses NUMERIC,
                costAndExpenses NUMERIC,
                interestIncome NUMERIC,
                interestExpense NUMERIC,
                depreciationAndAmortization NUMERIC,
                ebitda NUMERIC,
                ebitdaratio DOUBLE PRECISION,
                operatingIncome NUMERIC,
                operatingIncomeRatio DOUBLE PRECISION,
                totalOtherIncomeExpensesNet NUMERIC,
                incomeBeforeTax NUMERIC,
                incomeBeforeTaxRatio DOUBLE PRECISION,
                incomeTaxExpense NUMERIC,
                netIncome NUMERIC,
                netIncomeRatio DOUBLE PRECISION,
                eps DOUBLE PRECISION,
                epsdiluted DOUBLE PRECISION,
                weightedAverageShsOut NUMERIC,
                weightedAverageShsOutDil NUMERIC,
                link TEXT,
                finalLink TEXT,
                PRIMARY KEY (symbol, date)
            )
        """)

        # Equity balance table - match CSV headers exactly
        cur.execute("""
            CREATE TABLE IF NOT EXISTS equity_balance (
                date DATE,
                symbol VARCHAR(15),
                reportedCurrency VARCHAR(3),
                cik VARCHAR(20),
                fillingDate DATE,
                acceptedDate TIMESTAMP,
                calendarYear SMALLINT,
                period VARCHAR(3),
                cashAndCashEquivalents NUMERIC,
                shortTermInvestments NUMERIC,
                cashAndShortTermInvestments NUMERIC,
                netReceivables NUMERIC,
                inventory NUMERIC,
                otherCurrentAssets NUMERIC,
                totalCurrentAssets NUMERIC,
                propertyPlantEquipmentNet NUMERIC,
                goodwill NUMERIC,
                intangibleAssets NUMERIC,
                goodwillAndIntangibleAssets NUMERIC,
                longTermInvestments NUMERIC,
                taxAssets NUMERIC,
                otherNonCurrentAssets NUMERIC,
                totalNonCurrentAssets NUMERIC,
                otherAssets NUMERIC,
                totalAssets NUMERIC,
                accountPayables NUMERIC,
                shortTermDebt NUMERIC,
                taxPayables NUMERIC,
                deferredRevenue NUMERIC,
                otherCurrentLiabilities NUMERIC,
                totalCurrentLiabilities NUMERIC,
                longTermDebt NUMERIC,
                deferredRevenueNonCurrent NUMERIC,
                deferredTaxLiabilitiesNonCurrent NUMERIC,
                otherNonCurrentLiabilities NUMERIC,
                totalNonCurrentLiabilities NUMERIC,
                otherLiabilities NUMERIC,
                capitalLeaseObligations NUMERIC,
                totalLiabilities NUMERIC,
                preferredStock NUMERIC,
                commonStock NUMERIC,
                retainedEarnings NUMERIC,
                accumulatedOtherComprehensiveIncomeLoss NUMERIC,
                othertotalStockholdersEquity NUMERIC,
                totalStockholdersEquity NUMERIC,
                totalEquity NUMERIC,
                totalLiabilitiesAndStockholdersEquity NUMERIC,
                minorityInterest NUMERIC,
                totalLiabilitiesAndTotalEquity NUMERIC,
                totalInvestments NUMERIC,
                totalDebt NUMERIC,
                netDebt NUMERIC,
                link TEXT,
                finalLink TEXT,
                PRIMARY KEY (symbol, date)
            )
        """)

        # Equity cashflow table - match CSV headers exactly
        cur.execute("""
            CREATE TABLE IF NOT EXISTS equity_cashflow (
                date DATE,
                symbol VARCHAR(15),
                reportedCurrency VARCHAR(3),
                cik VARCHAR(20),
                fillingDate DATE,
                acceptedDate TIMESTAMP,
                calendarYear SMALLINT,
                period VARCHAR(3),
                netIncome NUMERIC,
                depreciationAndAmortization NUMERIC,
                deferredIncomeTax NUMERIC,
                stockBasedCompensation NUMERIC,
                changeInWorkingCapital NUMERIC,
                accountsReceivables NUMERIC,
                inventory NUMERIC,
                accountsPayables NUMERIC,
                otherWorkingCapital NUMERIC,
                otherNonCashItems NUMERIC,
                netCashProvidedByOperatingActivities NUMERIC,
                investmentsInPropertyPlantAndEquipment NUMERIC,
                acquisitionsNet NUMERIC,
                purchasesOfInvestments NUMERIC,
                salesMaturitiesOfInvestments NUMERIC,
                otherInvestingActivites NUMERIC,
                netCashUsedForInvestingActivites NUMERIC,
                debtRepayment NUMERIC,
                commonStockIssued NUMERIC,
                commonStockRepurchased NUMERIC,
                dividendsPaid NUMERIC,
                otherFinancingActivites NUMERIC,
                netCashUsedProvidedByFinancingActivities NUMERIC,
                effectOfForexChangesOnCash NUMERIC,
                netChangeInCash NUMERIC,
                cashAtEndOfPeriod NUMERIC,
                cashAtBeginningOfPeriod NUMERIC,
                operatingCashFlow NUMERIC,
                capitalExpenditure NUMERIC,
                freeCashFlow NUMERIC,
                link TEXT,
                finalLink TEXT,
                PRIMARY KEY (symbol, date)
            )
        """)

        # Equity financial ratios table - match CSV headers exactly
        cur.execute("""
            CREATE TABLE IF NOT EXISTS equity_financial_ratio (
                symbol VARCHAR(15),
                date DATE,
                calendarYear SMALLINT,
                period VARCHAR(3),
                currentRatio DOUBLE PRECISION,
                quickRatio DOUBLE PRECISION,
                cashRatio DOUBLE PRECISION,
                daysOfSalesOutstanding DOUBLE PRECISION,
                daysOfInventoryOutstanding DOUBLE PRECISION,
                operatingCycle DOUBLE PRECISION,
                daysOfPayablesOutstanding DOUBLE PRECISION,
                cashConversionCycle DOUBLE PRECISION,
                grossProfitMargin DOUBLE PRECISION,
                operatingProfitMargin DOUBLE PRECISION,
                pretaxProfitMargin DOUBLE PRECISION,
                netProfitMargin DOUBLE PRECISION,
                effectiveTaxRate DOUBLE PRECISION,
                returnOnAssets DOUBLE PRECISION,
                returnOnEquity DOUBLE PRECISION,
                returnOnCapitalEmployed DOUBLE PRECISION,
                netIncomePerEBT DOUBLE PRECISION,
                ebtPerEbit DOUBLE PRECISION,
                ebitPerRevenue DOUBLE PRECISION,
                debtRatio DOUBLE PRECISION,
                debtEquityRatio DOUBLE PRECISION,
                longTermDebtToCapitalization DOUBLE PRECISION,
                totalDebtToCapitalization DOUBLE PRECISION,
                interestCoverage DOUBLE PRECISION,
                cashFlowToDebtRatio DOUBLE PRECISION,
                companyEquityMultiplier DOUBLE PRECISION,
                receivablesTurnover DOUBLE PRECISION,
                payablesTurnover DOUBLE PRECISION,
                inventoryTurnover DOUBLE PRECISION,
                fixedAssetTurnover DOUBLE PRECISION,
                assetTurnover DOUBLE PRECISION,
                operatingCashFlowPerShare DOUBLE PRECISION,
                freeCashFlowPerShare DOUBLE PRECISION,
                cashPerShare DOUBLE PRECISION,
                payoutRatio DOUBLE PRECISION,
                operatingCashFlowSalesRatio DOUBLE PRECISION,
                freeCashFlowOperatingCashFlowRatio DOUBLE PRECISION,
                cashFlowCoverageRatios DOUBLE PRECISION,
                shortTermCoverageRatios DOUBLE PRECISION,
                capitalExpenditureCoverageRatio DOUBLE PRECISION,
                dividendPaidAndCapexCoverageRatio DOUBLE PRECISION,
                dividendPayoutRatio DOUBLE PRECISION,
                priceBookValueRatio DOUBLE PRECISION,
                priceToBookRatio DOUBLE PRECISION,
                priceToSalesRatio DOUBLE PRECISION,
                priceEarningsRatio DOUBLE PRECISION,
                priceToFreeCashFlowsRatio DOUBLE PRECISION,
                priceToOperatingCashFlowsRatio DOUBLE PRECISION,
                priceCashFlowRatio DOUBLE PRECISION,
                priceEarningsToGrowthRatio DOUBLE PRECISION,
                priceSalesRatio DOUBLE PRECISION,
                dividendYield DOUBLE PRECISION,
                enterpriseValueMultiple DOUBLE PRECISION,
                priceFairValue DOUBLE PRECISION,
                PRIMARY KEY (symbol, date)
            )
        """)

        # Equity key metrics table - match CSV headers exactly
        cur.execute("""
            CREATE TABLE IF NOT EXISTS equity_key_metrics (
                symbol VARCHAR(15),
                date DATE,
                calendarYear SMALLINT,
                period VARCHAR(3),
                revenuePerShare DOUBLE PRECISION,
                netIncomePerShare DOUBLE PRECISION,
                operatingCashFlowPerShare DOUBLE PRECISION,
                freeCashFlowPerShare DOUBLE PRECISION,
                cashPerShare DOUBLE PRECISION,
                bookValuePerShare DOUBLE PRECISION,
                tangibleBookValuePerShare DOUBLE PRECISION,
                shareholdersEquityPerShare DOUBLE PRECISION,
                interestDebtPerShare DOUBLE PRECISION,
                marketCap NUMERIC,
                enterpriseValue NUMERIC,
                peRatio DOUBLE PRECISION,
                priceToSalesRatio DOUBLE PRECISION,
                pocfratio DOUBLE PRECISION,
                pfcfRatio DOUBLE PRECISION,
                pbRatio DOUBLE PRECISION,
                ptbRatio DOUBLE PRECISION,
                evToSales DOUBLE PRECISION,
                enterpriseValueOverEBITDA DOUBLE PRECISION,
                evToOperatingCashFlow DOUBLE PRECISION,
                evToFreeCashFlow DOUBLE PRECISION,
                earningsYield DOUBLE PRECISION,
                freeCashFlowYield DOUBLE PRECISION,
                debtToEquity DOUBLE PRECISION,
                debtToAssets DOUBLE PRECISION,
                netDebtToEBITDA DOUBLE PRECISION,
                currentRatio DOUBLE PRECISION,
                interestCoverage DOUBLE PRECISION,
                incomeQuality DOUBLE PRECISION,
                dividendYield DOUBLE PRECISION,
                payoutRatio DOUBLE PRECISION,
                salesGeneralAndAdministrativeToRevenue DOUBLE PRECISION,
                researchAndDdevelopementToRevenue DOUBLE PRECISION,
                intangiblesToTotalAssets DOUBLE PRECISION,
                capexToOperatingCashFlow DOUBLE PRECISION,
                capexToRevenue DOUBLE PRECISION,
                capexToDepreciation DOUBLE PRECISION,
                stockBasedCompensationToRevenue DOUBLE PRECISION,
                grahamNumber DOUBLE PRECISION,
                roic DOUBLE PRECISION,
                returnOnTangibleAssets DOUBLE PRECISION,
                grahamNetNet NUMERIC,
                workingCapital NUMERIC,
                tangibleAssetValue NUMERIC,
                netCurrentAssetValue NUMERIC,
                investedCapital NUMERIC,
                averageReceivables NUMERIC,
                averagePayables NUMERIC,
                averageInventory NUMERIC,
                daysSalesOutstanding DOUBLE PRECISION,
                daysPayablesOutstanding DOUBLE PRECISION,
                daysOfInventoryOnHand DOUBLE PRECISION,
                receivablesTurnover DOUBLE PRECISION,
                payablesTurnover DOUBLE PRECISION,
                inventoryTurnover DOUBLE PRECISION,
                roe DOUBLE PRECISION,
                capexPerShare DOUBLE PRECISION,
                PRIMARY KEY (symbol, date)
            )
        """)

        # ETFs profile table - match CSV headers exactly
        cur.execute("""
            CREATE TABLE IF NOT EXISTS etfs_profile (
                symbol VARCHAR(15) PRIMARY KEY,
                price DOUBLE PRECISION,
                beta DOUBLE PRECISION,
                volAvg BIGINT,
                mktCap BIGINT,
                lastDiv DOUBLE PRECISION,
                range VARCHAR(50),
                changes DOUBLE PRECISION,
                companyName VARCHAR(255),
                currency VARCHAR(10),
                cik VARCHAR(20),
                isin VARCHAR(20),
                cusip VARCHAR(20),
                exchange VARCHAR(100),
                exchangeShortName VARCHAR(50),
                industry VARCHAR(100),
                website VARCHAR(255),
                description TEXT,
                ceo VARCHAR(100),
                sector VARCHAR(100),
                country VARCHAR(50),
                fullTimeEmployees BIGINT,
                phone VARCHAR(50),
                address VARCHAR(255),
                city VARCHAR(100),
                state VARCHAR(50),
                zip VARCHAR(20),
                dcfDiff DOUBLE PRECISION,
                dcf DOUBLE PRECISION,
                image VARCHAR(255),
                ipoDate DATE,
                defaultImage BOOLEAN,
                isEtf BOOLEAN,
                isActivelyTrading BOOLEAN,
                isAdr BOOLEAN,
                isFund BOOLEAN,
                assetClass VARCHAR(50),
                aum NUMERIC,
                avgVolume BIGINT,
                domicile VARCHAR(50),
                etfCompany VARCHAR(100),
                expenseRatio DOUBLE PRECISION,
                inceptionDate DATE,
                name VARCHAR(255),
                nav DOUBLE PRECISION,
                navCurrency VARCHAR(10),
                sectorsList TEXT,
                holdingsCount INTEGER
            )
        """)

        # ETFs data table - match CSV headers exactly
        cur.execute("""
            CREATE TABLE IF NOT EXISTS etfs_data (
                symbol VARCHAR(15),
                asset VARCHAR(50),
                name VARCHAR(255),
                isin VARCHAR(20),
                securityCusip VARCHAR(20),
                sharesNumber NUMERIC,
                weightPercentage DOUBLE PRECISION,
                marketValue NUMERIC,
                updatedAt TIMESTAMP,
                etf_symbol VARCHAR(15),
                data_type VARCHAR(50),
                country VARCHAR(50),
                weight_percentage DOUBLE PRECISION
            )
        """)

        # Equity quotes table - match CSV headers exactly
        cur.execute("""
            CREATE TABLE IF NOT EXISTS equity_quotes (
                date DATE,
                open DOUBLE PRECISION,
                high DOUBLE PRECISION,
                low DOUBLE PRECISION,
                close DOUBLE PRECISION,
                adjClose DOUBLE PRECISION,
                volume BIGINT,
                unadjustedVolume BIGINT,
                change DOUBLE PRECISION,
                changePercent DOUBLE PRECISION,
                vwap DOUBLE PRECISION,
                label VARCHAR(50),
                changeOverTime DOUBLE PRECISION,
                symbol VARCHAR(15),
                PRIMARY KEY (symbol, date)
            )
        """)

        # ETFs quotes table - match CSV headers exactly
        cur.execute("""
            CREATE TABLE IF NOT EXISTS etfs_quotes (
                date DATE,
                open DOUBLE PRECISION,
                high DOUBLE PRECISION,
                low DOUBLE PRECISION,
                close DOUBLE PRECISION,
                adjClose DOUBLE PRECISION,
                volume BIGINT,
                unadjustedVolume BIGINT,
                change DOUBLE PRECISION,
                changePercent DOUBLE PRECISION,
                vwap DOUBLE PRECISION,
                label VARCHAR(50),
                changeOverTime DOUBLE PRECISION,
                symbol VARCHAR(15),
                PRIMARY KEY (symbol, date)
            )
        """)

        # Equity peers table - fix NOT NULL constraint issue
        cur.execute("""
            CREATE TABLE IF NOT EXISTS equity_peers (
                symbol VARCHAR(15) NOT NULL,
                peer_symbol VARCHAR(15),
                PRIMARY KEY (symbol, peer_symbol)
            )
        """)

        # ETFs peers table
        cur.execute("""
            CREATE TABLE IF NOT EXISTS etfs_peers (
                symbol VARCHAR(15) NOT NULL,
                peer_symbol VARCHAR(15),
                PRIMARY KEY (symbol, peer_symbol)
            )
        """)
                free_cash_flow_per_share DOUBLE PRECISION,
                cash_per_share DOUBLE PRECISION,
                book_value_per_share DOUBLE PRECISION,
                tangible_book_value_per_share DOUBLE PRECISION,
                shareholders_equity_per_share DOUBLE PRECISION,
                interest_debt_per_share DOUBLE PRECISION,
                market_cap BIGINT,
                enterprise_value BIGINT,
                pe_ratio DOUBLE PRECISION,
                price_to_sales_ratio DOUBLE PRECISION,
                pocfratio DOUBLE PRECISION,
                pfcfRatio DOUBLE PRECISION,
                pb_ratio DOUBLE PRECISION,
                ptb_ratio DOUBLE PRECISION,
                ev_to_sales DOUBLE PRECISION,
                enterprise_value_over_ebitda DOUBLE PRECISION,
                ev_to_operating_cash_flow DOUBLE PRECISION,
                ev_to_free_cash_flow DOUBLE PRECISION,
                earnings_yield DOUBLE PRECISION,
                free_cash_flow_yield DOUBLE PRECISION,
                debt_to_equity DOUBLE PRECISION,
                debt_to_assets DOUBLE PRECISION,
                net_debt_to_ebitda DOUBLE PRECISION,
                current_ratio DOUBLE PRECISION,
                interest_coverage DOUBLE PRECISION,
                income_quality DOUBLE PRECISION,
                dividend_yield DOUBLE PRECISION,
                payout_ratio DOUBLE PRECISION,
                sales_general_and_administrative_to_revenue DOUBLE PRECISION,
                research_and_development_to_revenue DOUBLE PRECISION,
                intangibles_to_total_assets DOUBLE PRECISION,
                capex_to_operating_cash_flow DOUBLE PRECISION,
                capex_to_revenue DOUBLE PRECISION,
                capex_to_depreciation DOUBLE PRECISION,
                stock_based_compensation_to_revenue DOUBLE PRECISION,
                graham_number DOUBLE PRECISION,
                roic DOUBLE PRECISION,
                return_on_tangible_assets DOUBLE PRECISION,
                graham_net_net DOUBLE PRECISION,
                working_capital BIGINT,
                tangible_asset_value BIGINT,
                net_current_asset_value BIGINT,
                invested_capital BIGINT,
                average_receivables BIGINT,
                average_payables BIGINT,
                average_inventory BIGINT,
                days_sales_outstanding DOUBLE PRECISION,
                days_payables_outstanding DOUBLE PRECISION,
                days_of_inventory_on_hand DOUBLE PRECISION,
                receivables_turnover DOUBLE PRECISION,
                payables_turnover DOUBLE PRECISION,
                inventory_turnover DOUBLE PRECISION,
                roe DOUBLE PRECISION,
                capex_per_share DOUBLE PRECISION,
                PRIMARY KEY (symbol, date)
            )
        """)

        conn.commit()
        logger.info("Tables created successfully")

def load_csv_to_table(conn, csv_file: str, table_name: str) -> bool:
    """Load a CSV file to PostgreSQL table using COPY FROM."""
    csv_path = os.path.join(get_fmp_csv_directory(), csv_file)

    if not os.path.exists(csv_path):
        logger.warning(f"CSV file not found: {csv_path}")
        return False

    logger.info(f"Loading {csv_file} to {table_name}...")

    try:
        with conn.cursor() as cur:
            # Special handling for equity_peers to filter out empty peer_symbol
            if table_name == 'equity_peers':
                # Load into temp table first, then filter
                cur.execute(f"CREATE TEMP TABLE temp_{table_name} (LIKE {table_name})")
                with open(csv_path, 'r', encoding='utf-8') as f:
                    next(f)  # Skip header
                    cur.copy_from(f, f"temp_{table_name}", sep=',', null='', columns=None)

                # Copy only rows with non-empty peer_symbol
                cur.execute(f"""
                    INSERT INTO {table_name}
                    SELECT * FROM temp_{table_name}
                    WHERE peer_symbol IS NOT NULL AND peer_symbol != ''
                """)
                cur.execute(f"DROP TABLE temp_{table_name}")
            else:
                with open(csv_path, 'r', encoding='utf-8') as f:
                    # Skip header line
                    next(f)

                    # Use COPY FROM for fast loading
                    cur.copy_from(
                        f,
                        table_name,
                        sep=',',
                        null='',
                        columns=None  # Use all columns in order
                    )

            conn.commit()

            # Get row count
            cur.execute(f"SELECT COUNT(*) FROM {table_name}")
            row_count = cur.fetchone()[0]
            logger.info(f"Successfully loaded {row_count} rows into {table_name}")

        return True

    except Exception as e:
        logger.error(f"Error loading {csv_file} to {table_name}: {e}")
        conn.rollback()
        return False

def clear_existing_data(conn):
    """Clear existing FMP data before loading."""
    logger.info("Clearing existing FMP data...")

    # Include all FMP tables plus the additional ones
    tables = list(FMP_CSV_TABLES.values()) + [
        'etfs_quotes', 'equity_quotes', 'equity_balance_growth', 'equity_cashflow_growth',
        'equity_financial_growth', 'equity_income_growth'
    ]

    with conn.cursor() as cur:
        for table in tables:
            try:
                cur.execute(f"TRUNCATE TABLE {table} CASCADE")
                logger.info(f"Cleared table: {table}")
            except Exception as e:
                logger.warning(f"Could not clear table {table}: {e}")

        conn.commit()

def load_etf_quotes_directory(conn) -> bool:
    """Load all ETF quote files from etfs_quotes directory."""
    logger.info("Loading ETF quotes from directory...")

    etf_quotes_dir = os.path.join(get_fmp_csv_directory(), 'etfs_quotes')

    if not os.path.exists(etf_quotes_dir):
        logger.warning("ETF quotes directory not found")
        return True  # Not an error if directory doesn't exist

    success_count = 0
    total_files = 0

    for filename in os.listdir(etf_quotes_dir):
        if filename.endswith('.csv'):
            total_files += 1
            file_path = os.path.join(etf_quotes_dir, filename)

            logger.info(f"Loading ETF quotes from {filename}...")

            try:
                with conn.cursor() as cur:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        # Skip header line
                        next(f)

                        # Use COPY FROM for fast loading
                        cur.copy_from(
                            f,
                            'etfs_quotes',
                            sep=',',
                            null='',
                            columns=None
                        )

                success_count += 1
                logger.info(f"Successfully loaded {filename}")

            except Exception as e:
                logger.error(f"Error loading {filename}: {e}")

    if total_files > 0:
        logger.info(f"ETF quotes loading: {success_count}/{total_files} files loaded")

    return success_count == total_files

def load_equity_quotes_directory(conn) -> bool:
    """Load all equity quote files from equity_quotes directory."""
    logger.info("Loading equity quotes from directory...")

    equity_quotes_dir = os.path.join(get_fmp_csv_directory(), 'equity_quotes')

    if not os.path.exists(equity_quotes_dir):
        logger.warning("Equity quotes directory not found")
        return True  # Not an error if directory doesn't exist

    success_count = 0
    total_files = 0

    for filename in os.listdir(equity_quotes_dir):
        if filename.endswith('.csv'):
            total_files += 1
            file_path = os.path.join(equity_quotes_dir, filename)

            logger.info(f"Loading equity quotes from {filename}...")

            try:
                with conn.cursor() as cur:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        # Skip header line
                        next(f)

                        # Use COPY FROM for fast loading
                        cur.copy_from(
                            f,
                            'equity_quotes',
                            sep=',',
                            null='',
                            columns=None
                        )

                success_count += 1
                logger.info(f"Successfully loaded {filename}")

            except Exception as e:
                logger.error(f"Error loading {filename}: {e}")

    if total_files > 0:
        logger.info(f"Equity quotes loading: {success_count}/{total_files} files loaded")

    return success_count == total_files

def load_all_fmp_csvs() -> bool:
    """Load all FMP CSV files to PostgreSQL."""
    logger.info("Starting FMP CSV loading process...")

    try:
        # Connect to database
        conn = psycopg2.connect(
            host=DB_HOST,
            port=DB_PORT,
            dbname=DB_NAME,
            user=DB_USER,
            password=DB_PASSWORD
        )

        # Create tables
        create_tables(conn)

        # Clear existing data
        clear_existing_data(conn)

        # Load each CSV file
        success_count = 0
        for csv_file, table_name in FMP_CSV_TABLES.items():
            if load_csv_to_table(conn, csv_file, table_name):
                success_count += 1

        # Load ETF quotes directory
        etf_quotes_success = load_etf_quotes_directory(conn)

        # Load equity quotes directory
        equity_quotes_success = load_equity_quotes_directory(conn)

        conn.close()

        total_expected = len(FMP_CSV_TABLES)
        logger.info(f"FMP CSV loading completed: {success_count}/{total_expected} files loaded successfully")

        if etf_quotes_success:
            logger.info("ETF quotes loading completed successfully")

        if equity_quotes_success:
            logger.info("Equity quotes loading completed successfully")

        return success_count == total_expected and etf_quotes_success and equity_quotes_success

    except Exception as e:
        logger.error(f"Error in FMP CSV loading process: {e}")
        return False

def get_loading_status() -> Dict[str, int]:
    """Get row counts for all FMP tables."""
    try:
        conn = psycopg2.connect(
            host=DB_HOST,
            port=DB_PORT,
            dbname=DB_NAME,
            user=DB_USER,
            password=DB_PASSWORD
        )

        status = {}
        with conn.cursor() as cur:
            # Check main FMP tables
            for table_name in FMP_CSV_TABLES.values():
                try:
                    cur.execute(f"SELECT COUNT(*) FROM {table_name}")
                    count = cur.fetchone()[0]
                    status[table_name] = count
                except Exception as e:
                    status[table_name] = f"Error: {e}"

            # Check directory-based tables
            for table_name in ['etfs_quotes', 'equity_quotes']:
                try:
                    cur.execute(f"SELECT COUNT(*) FROM {table_name}")
                    count = cur.fetchone()[0]
                    status[table_name] = count
                except Exception as e:
                    status[table_name] = f"Error: {e}"

        conn.close()
        return status

    except Exception as e:
        logger.error(f"Error getting loading status: {e}")
        return {}

if __name__ == "__main__":
    success = load_all_fmp_csvs()

    if success:
        print("\n=== FMP CSV Loading Complete ===")
        status = get_loading_status()
        for table, count in status.items():
            print(f"{table}: {count} rows")
    else:
        print("FMP CSV loading failed - check logs for details")
        exit(1)